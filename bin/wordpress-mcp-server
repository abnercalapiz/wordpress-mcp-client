#!/usr/bin/env node
/**
 * WordPress MCP Server
 * A simple Node.js server that acts as a bridge between Claude Desktop and WordPress sites
 */

const https = require('https');
const readline = require('readline');

// Get site URL from environment variable or command line argument
const SITE_URL = process.env.WORDPRESS_SITE_URL || process.argv[2];

if (!SITE_URL) {
  console.error('Error: No WordPress site URL provided');
  console.error('Usage: wordpress-mcp-server <site-url>');
  console.error('   or: WORDPRESS_SITE_URL=<site-url> wordpress-mcp-server');
  process.exit(1);
}

// Remove trailing slash and ensure HTTPS
const baseUrl = SITE_URL.replace(/\/$/, '').replace(/^http:/, 'https:');
const apiBase = `${baseUrl}/wp-json/llmr/mcp/v1`;

// Available tools
const TOOLS = [
  {
    name: 'discovery',
    description: 'Discover available endpoints and capabilities',
    inputSchema: {
      type: 'object',
      properties: {}
    }
  },
  {
    name: 'business',
    description: 'Get business information',
    inputSchema: {
      type: 'object',
      properties: {}
    }
  },
  {
    name: 'contact',
    description: 'Get contact information',
    inputSchema: {
      type: 'object',
      properties: {}
    }
  },
  {
    name: 'services',
    description: 'List services or products',
    inputSchema: {
      type: 'object',
      properties: {}
    }
  },
  {
    name: 'search',
    description: 'Search content on the WordPress site',
    inputSchema: {
      type: 'object',
      properties: {
        query: {
          type: 'string',
          description: 'Search query'
        },
        per_page: {
          type: 'number',
          description: 'Results per page',
          default: 10
        },
        page: {
          type: 'number',
          description: 'Page number',
          default: 1
        }
      },
      required: ['query']
    }
  }
];

// Setup readline for JSON-RPC communication
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
  terminal: false
});

// Send JSON-RPC response
function sendResponse(response) {
  console.log(JSON.stringify(response));
}

// Make HTTP request to WordPress
function makeRequest(endpoint, method = 'GET', data = null) {
  return new Promise((resolve, reject) => {
    const url = new URL(`${apiBase}/${endpoint}`);
    
    const options = {
      method: method,
      headers: {
        'User-Agent': 'WordPress-MCP-Server/1.0',
        'Accept': 'application/json'
      }
    };

    if (method === 'POST' && data) {
      options.headers['Content-Type'] = 'application/json';
    }

    const req = https.request(url, options, (res) => {
      let body = '';
      
      res.on('data', (chunk) => {
        body += chunk;
      });
      
      res.on('end', () => {
        try {
          const result = JSON.parse(body);
          if (res.statusCode >= 200 && res.statusCode < 300) {
            resolve(result);
          } else {
            reject(new Error(`HTTP ${res.statusCode}: ${result.message || res.statusMessage}`));
          }
        } catch (e) {
          reject(new Error(`Failed to parse response: ${e.message}`));
        }
      });
    });

    req.on('error', reject);

    if (method === 'POST' && data) {
      req.write(JSON.stringify(data));
    }

    req.end();
  });
}

// Handle tool calls
async function handleToolCall(name, args) {
  try {
    switch (name) {
      case 'discovery':
        return await makeRequest('discovery');
      
      case 'business':
        return await makeRequest('business');
      
      case 'contact':
        return await makeRequest('contact');
      
      case 'services':
        return await makeRequest('services');
      
      case 'search':
        return await makeRequest('search', 'POST', {
          query: args.query || '',
          per_page: args.per_page || 10,
          page: args.page || 1
        });
      
      default:
        throw new Error(`Unknown tool: ${name}`);
    }
  } catch (error) {
    throw error;
  }
}

// Process JSON-RPC requests
rl.on('line', async (line) => {
  try {
    const request = JSON.parse(line);
    
    switch (request.method) {
      case 'initialize':
        sendResponse({
          jsonrpc: '2.0',
          id: request.id,
          result: {
            protocolVersion: '0.1.0',
            capabilities: {
              tools: {}
            },
            serverInfo: {
              name: 'wordpress-mcp-server',
              version: '1.0.0'
            }
          }
        });
        break;
      
      case 'tools/list':
        sendResponse({
          jsonrpc: '2.0',
          id: request.id,
          result: {
            tools: TOOLS
          }
        });
        break;
      
      case 'tools/call':
        try {
          const result = await handleToolCall(
            request.params.name,
            request.params.arguments || {}
          );
          
          sendResponse({
            jsonrpc: '2.0',
            id: request.id,
            result: {
              content: [
                {
                  type: 'text',
                  text: JSON.stringify(result, null, 2)
                }
              ]
            }
          });
        } catch (error) {
          sendResponse({
            jsonrpc: '2.0',
            id: request.id,
            error: {
              code: -32603,
              message: error.message
            }
          });
        }
        break;
      
      default:
        sendResponse({
          jsonrpc: '2.0',
          id: request.id,
          error: {
            code: -32601,
            message: `Method not found: ${request.method}`
          }
        });
    }
  } catch (error) {
    console.error('Error processing request:', error);
  }
});

// Handle shutdown
process.on('SIGINT', () => {
  process.exit(0);
});

// Log startup to stderr (not stdout which is used for JSON-RPC)
console.error(`WordPress MCP Server started for ${baseUrl}`);